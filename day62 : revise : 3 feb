Question :

To maintain ecological balance, the Lake Council has introduced a rule to determine which lakes can be ecologically linked. Two lakes can be linked if the name of one lake is a subsequence of the other.

A lake A is said to be a subsequence of lake B if A can be obtained by deleting some characters from B without changing the order of the remaining characters.

Your task is to determine whether two lakes can be linked according to the Lake Council’s rule.

Input Format

The first line contains an integer T, the number of test cases.
Each test case consists of two space-separated strings L1 and L2, representing the names of two lakes.
Constraints

1 ≤ T ≤ 1000
1 ≤ |L1|, |L2| ≤ 25000 (|L| denotes the length of the string L.)
All lake names consist of lowercase English letters only.
Output Format

For each test case, print "YES" if the lakes can be linked, otherwise print "NO".

Sample Input 0

4  
titicaca ititicaca
chilika chilika  
wular sambhar
como caomo
Sample Output 0

YES
YES  
NO
YES
Explanation 0

Case 1: "titicaca" and "ititicaca"

We can form "titicaca" by removing the first 'i' from "ititicaca". The remaining characters match exactly. Hence, "titicaca" is a subsequence of "ititicaca", so the answer is "YES".

Case 2: "chilika" and "chilika"

Any string is trivially a subsequence of itself, as no characters need to be removed. Hence the answer is "YES".

Case 3: "wular" and "sambhar"

"sambhar" cannot be formed from "wular", as "wular" does not contain the characters 's', 'm', 'b' or 'h'. Similar reasoning can be applied to see why "wular" can't be attained from "sambhar". Hence the answer is "NO".

Case 4: "como" and "caomo" We can form "como" by removing the 'a' from "caomo". The remaining characters match exactly. Hence the answer is "YES".


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


  CODE:

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

// Function to check if str1 is a subsequence of str2
bool isSubsequence(const string& str1, const string& str2) {
    int m = str1.length();
    int n = str2.length();
    
    int j = 0; // Index for str1
    for (int i = 0; i < n && j < m; i++) {
        if (str1[j] == str2[i]) {
            j++;
        }
    }
    return j == m; // If j reached the end of str1, then str1 is a subsequence of str2
}

int main() {
    int T;
    cin >> T; // Read number of test cases
    while (T--) {
        string L1, L2;
        cin >> L1 >> L2; // Read the names of the lakes
        
        // Check if either L1 is a subsequence of L2 or L2 is a subsequence of L1
        if (isSubsequence(L1, L2) || isSubsequence(L2, L1)) {
            cout << "YES" << endl;
        } else {
            cout << "NO" << endl;
        }
    }
  
    return 0;
}

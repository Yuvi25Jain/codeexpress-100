Question :

You are standing inside a moving train, looking out through a window of size k. As the train moves forward, you can only see k consecutive train coaches at a time. The train is long, and each coach has a number written on it.

As the train moves one coach forward, the leftmost coach goes out of view, and a new coach appears on the right. Your task is to determine the largest number visible through the window after each movement.

Input Format

The first line contains T, the number of test cases. The first line of each testcase contains N (number of coaches) and k (size of the window). The second line contains N integers representing the numbers written on each coach in order. Constraints

1 <= T <= 1000 1 <= N <= 10^5 -10^4 <= N[i] <= 10^4 1 <= k <= N Output Format

For each test case, print the largest number visible through the train window after each movement.

Sample Input 0

2 8 3 1 3 -1 -3 5 3 6 7 1 1 1 Sample Output 0

3 3 5 5 6 7 1 Explanation 0

Test Case 1 (Train with 8 Coaches, Window Size 3)

[1 3 -1] -3 5 3 6 7 → (Max = 3) 1 [3 -1 -3] 5 3 6 7 → (Max = 3) 1 3 [-1 -3 5] 3 6 7 → (Max = 5) 1 3 -1 [-3 5 3] 6 7 → (Max = 5) 1 3 -1 -3 [5 3 6] 7 → (Max = 6) 1 3 -1 -3 5 [3 6 7] → (Max = 7) Test Case 2 (Train with 1 Coach, Window Size 1)

[1] → (Max = 1)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



CODE:


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <deque>
using namespace std;

void findMaxInSlidingWindow(int N, int k, const vector<int>& coaches) {
    deque<int> dq; // Deque to store indices of useful elements
    vector<int> result; // To store the result for this test case

    for (int i = 0; i < N; i++) {
        // Remove elements that are out of this window
        if (!dq.empty() && dq.front() == i - k) {
            dq.pop_front();
        }

        // Remove elements from the back that are less than the current element
        while (!dq.empty() && coaches[dq.back()] < coaches[i]) {
            dq.pop_back();
        }

        // Add current element at the back of the deque
        dq.push_back(i);

        // The first k elements are not fully processed
        if (i >= k - 1) {
            result.push_back(coaches[dq.front()]); // The front of the deque is the largest element
        }
    }

    // Print the result for this test case
    for (int maxVal : result) {
        cout << maxVal << " ";
    }
    cout << endl;
}

int main() {
    int T;
    cin >> T; // Number of test cases

    while (T--) {
        int N, k;
        cin >> N >> k; // Number of coaches and size of the window
        vector<int> coaches(N);

        for (int i = 0; i < N; i++) {
            cin >> coaches[i]; // Read the coach numbers
        }

        findMaxInSlidingWindow(N, k, coaches);
    }

  
    return 0;
}



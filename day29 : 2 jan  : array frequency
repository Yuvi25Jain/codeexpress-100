Question : 


Archaeologists have uncovered a fascinating array of fossils in the desert, each assigned a unique numeric code representing its type. A fossil is considered rare if the frequency of its type in the collection matches the numeric code assigned to it.

Your goal is to identify all rare fossil types in the collection. Output these rare types in ascending order. If no rare fossil types exist, output -1.

Input Format

The first line contains an integer T, the number of test cases.

For each test case: The first line contains an integer n, the number of fossils in the collection. The second line contains n integers, representing the numeric codes of the fossils.

Constraints

1<=T<=10^3 1<=n<=1000 1<=fossil_type[i]<=1000 Output Format

For each test case, output a single line:

The numeric codes of all rare fossil types in ascending order, separated by spaces. If no rare fossil types exist, output -1. 

Sample Input 

1 6 1 1 1 2 2 3 
  
Sample Output 0

2


Output explanation : 

In the given collection:

Fossil type 1 appears 3 times.
Fossil type 2 appears 2 times.
Fossil type 3 appears 1 time.
The only rare fossil type is 2, as its count matches its numeric code.


-----------------------------------------------------------------------------------------------

CODE: 


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;


int main() {
    int T; // Number of test cases
    cin >> T;

    while (T--) {
        int n; // Number of fossils
        cin >> n;

        vector<int> fossils(n);
        unordered_map<int, int> frequency;

        // Read fossil types and count their frequencies
        for (int i = 0; i < n; ++i) {
            cin >> fossils[i];
            frequency[fossils[i]]++;
        }

        vector<int> rareFossils;

        // Check for rare fossil types
        for (const auto& pair : frequency) {
            if (pair.first == pair.second) {
                rareFossils.push_back(pair.first);
            }
        }

        // Sort the rare fossil types
        sort(rareFossils.begin(), rareFossils.end());

        // Output the result
        if (rareFossils.empty()) {
            cout << -1 << endl;
        } else {
            for (size_t i = 0; i < rareFossils.size(); ++i) { // Use size_t for the loop index
                cout << rareFossils[i];
                if (i < rareFossils.size() - 1) {
                    cout << " ";
                }
            }
            cout << endl;
        }
    }

 

 
    return 0;
}

----------------------------------------------------------------------------------------------

LEARNING : 

1. <unordered_map>: Allows the use of hash tables for key-value pairs, enabling fast lookups.
2. size_t : size_t is an unsigned integer type that is used for sizes and counts. It is the appropriate type to use when dealing with sizes of containers like vectors, as it avoids the signed/unsigned comparison issues and is guaranteed to be able to represent the size of any object in memory.

3. Complexity:
The time complexity is O(n log n) for sorting the rare fossil types, where n is the number of fossils in a test case. The frequency counting is O(n), making the overall complexity manageable within the given constraints.
  

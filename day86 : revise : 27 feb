Question :

You are a secret agent trying to uncover a hidden message in a m × n grid of letters. The message is encoded as a word, and you must determine if it can be formed by moving sequentially through adjacent letters in the grid.

You can move up, down, left, or right, but you cannot use the same letter cell more than once in a single search.

Return true if you can trace the word in the grid; otherwise, return false.

Input Format

The first line contains two integers, m and n, the dimensions of the secret message grid.
The next m lines each contain n uppercase or lowercase letters representing the grid.
The last line contains a string, a word, which is the hidden message you need to find.
Constraints

1≤m,n≤6
1≤ word.length ≤15
grid and word consist only of uppercase and lowercase English letters.
Output Format

Print true if the secret message can be formed, otherwise print false.

Sample Input 0

3 4
A B C E
S F C S
A D E E
ABCCED
Sample Output 0

true
Explanation 0

Since all letters are found sequentially, the output is true.

Sample Input 1

3 4
A B C E
S F C S
A D E E
SEE
Sample Output 1

true
Explanation 1

The word is formed by moving through valid neighboring cells.

Sample Input 2

3 4
A B C E
S F C S
A D E E
ABCB
Sample Output 2

false
Explanation 2

The first three letters "A → B → C" are found, but after reaching 'C', there is no valid way to pick another 'B' without revisiting a used cell. Since the word cannot be formed, the output is false.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CODE:


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;


class Solution {
public:
    bool exist(vector<vector<char>>& board, const string& word) {
        size_t m = board.size();
        size_t n = board[0].size();
        
        for (size_t i = 0; i < m; i++) {
            for (size_t j = 0; j < n; j++) {
                if (dfs(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }

private:
    bool dfs(vector<vector<char>>& board, const string& word, size_t i, size_t j, size_t index) {
        if (index == word.size()) {
            return true; // Found the word
        }
        if (i >= board.size() || j >= board[0].size() || board[i][j] != word[index]) {
            return false; // Out of bounds or character does not match
        }

        char temp = board[i][j]; // Store the current character
        board[i][j] = '#'; // Mark the cell as visited

        // Explore all possible directions: up, down, left, right
        bool found = dfs(board, word, i + 1, j, index + 1) ||
                     dfs(board, word, i - 1, j, index + 1) ||
                     dfs(board, word, i, j + 1, index + 1) ||
                     dfs(board, word, i, j - 1, index + 1);

        board[i][j] = temp; // Restore the cell's original value
        return found;
    }
};

int main() {
    size_t m, n;
    cin >> m >> n;
    vector<vector<char>> board(m, vector<char>(n));
    
    for (size_t i = 0; i < m; i++) {
        for (size_t j = 0; j < n; j++) {
            cin >> board[i][j];
        }
    }
    
    string word;
    cin >> word;

    Solution solution;
    cout << (solution.exist(board, word) ? "true" : "false") << endl;

 

 
    
    return 0;
}

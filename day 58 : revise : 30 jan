Question : 

You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.

You are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. Print the minimum number of seconds needed to fill up all the cups.

Input Format

The first line will give T, the number of testcases.
Each testcase will give an integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively.
Constraints

1 <= T <= 1000
amount.length == 3
0 <= amount[i] <= 100
Output Format

For each testcase print the minimum number of seconds needed to fill up all the cups.

Sample Input 0

1
1 4 2
Sample Output 0

4
Explanation 0

One way to fill up the cups is:

Second 1: Fill up a cold cup and a warm cup.
Second 2: Fill up a warm cup and a hot cup.
Second 3: Fill up a warm cup and a hot cup.
Second 4: Fill up a warm cup.
It can be proven that 4 is the minimum number of seconds needed.

Sample Input 1

1
5 4 4
Sample Output 1

7
Explanation 1

One way to fill up the cups is:

Second 1: Fill up a cold cup, and a hot cup.
Second 2: Fill up a cold cup, and a warm cup.
Second 3: Fill up a cold cup, and a warm cup.
Second 4: Fill up a warm cup, and a hot cup.
Second 5: Fill up a cold cup, and a hot cup.
Second 6: Fill up a cold cup, and a warm cup.
Second 7: Fill up a hot cup.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CODE:

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int minSecondsToFillCups(vector<int>& amount) {
    // Sort the amounts to easily access the largest two
    sort(amount.begin(), amount.end());
    
    // The total seconds needed
    int seconds = 0;
    
    // While there are cups to fill
    while (amount[2] > 0) {
        // Fill the two largest cups
        if (amount[1] > 0) {
            amount[1]--;
        }
        amount[2]--;
        seconds++;
        
        // Re-sort the amounts to maintain the order
        sort(amount.begin(), amount.end());
    }
    
    return seconds;
}

int main() {
    int T;
    cin >> T; // Read number of test cases
    while (T--) {
        vector<int> amount(3);
        cin >> amount[0] >> amount[1] >> amount[2]; // Read the amounts
        cout << minSecondsToFillCups(amount) << endl; // Output the result
    }
    return 0;
}

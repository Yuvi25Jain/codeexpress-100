Question:

Zara must traverse the grid in a spiral order, starting from the top-left corner and moving clockwise. The mission is to extract the data in this specific sequence to unlock the mysteries of the universe. Can you help Commander Zara complete the traversal?
-------------------------------------------------------------------------------------------------
Input Format

The first line contains T, the number of test cases. For each test case:

The first line contains two integers m and n, the dimensions of the grid. The next m lines contain n integers, representing the encoded data in the grid. Constraints

1<=T<=1000 1<=m,n<=10 -100000<=matrix[i][j]<=100000 Output Format

For each test case, output the data from the grid in a single line, traversed in spiral order.

Sample Input 0

1 3 3 1 2 3 4 5 6 7 8 9
  
Sample Output 0

1 2 3 6 9 8 7 4 5 

-------------------------------------------------------------------------------------------------


Code:

  #include <iostream>
#include <vector>

using namespace std;

void spiralOrder(const vector<vector<int>>& matrix, vector<int>& result) {
    if (matrix.empty()) return;

    int top = 0, bottom = matrix.size() - 1;
    int left = 0, right = matrix[0].size() - 1;

    while (top <= bottom && left <= right) {
        // Traverse from left to right
        for (int i = left; i <= right; i++) {
            result.push_back(matrix[top][i]);
        }
        top++;

        // Traverse from top to bottom
        for (int i = top; i <= bottom; i++) {
            result.push_back(matrix[i][right]);
        }
        right--;

        if (top <= bottom) {
            // Traverse from right to left
            for (int i = right; i >= left; i--) {
                result.push_back(matrix[bottom][i]);
            }
            bottom--;
        }

        if (left <= right) {
            // Traverse from bottom to top
            for (int i = bottom; i >= top; i--) {
                result.push_back(matrix[i][left]);
            }
            left++;
        }
    }
}

int main() {
    int T;
    cin >> T; // Read number of test cases

    while (T--) {
        int m, n;
        cin >> m >> n; // Read dimensions of the grid

        vector<vector<int>> matrix(m, vector<int>(n));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                cin >> matrix[i][j]; // Read the grid data
            }
        }

        vector<int> result;
        spiralOrder(matrix, result); // Get the spiral order

        // Output the result
        for (size_t i = 0; i < result.size(); i++) {
            cout << result[i];
            if (i < result.size() - 1) {
                cout << " "; // Print space between numbers
            }
        }
        cout << endl; // New line after each test case
    }

    return 0;
}

----------------------------------------------------------------------------------------------
 EXPLANATION/ LEARNING:

1. void spiralOrder(const vector<vector<int>>& matrix, vector<int>& result) :

i. const vector<vector<int>>& matrix : indicates matrix is 2 dimensional vector(vevtors of vector) where each inner vector represent a row of integer. This is used to represent the grid or matrix of integer.


const : keyword that matrix parameter is read only within the function. the function cannot modify the content of matrix . good practice when we want to ensure that the input data remains unchanged.

& : symbol indicates that matrix is passed by reference means fuunctoin receive a reference to the original vector rather than a copy of it. more efficient especially for large data structure as it avoid the overhead of copying the entire matrix.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




2. left = start from the first coloum and right : start from last coloum (index of last coloum in the first row of matrix).


  top : start from the first row and bottom : start from the last row.
---------------------------------------------------------------------------------------------



3. traverse from 

i. left to right: start from left run less than equal to right , increment i then result.push_back (matrix[top][i])

top++ ;



ii.  top to bottom: 
start from top t run less than equal to bottom , increment i then result.push_back (matrix[right][i])

right-- ;


iii. right to left : 
top<= bottom

            for (int i = right; i >= left; i--) {
                result.push_back(matrix[bottom][i]);
            }
            bottom--;



iv.  bottom to up :

 if (left <= right) {
            
            for (int i = bottom; i >= top; i--) {
                result.push_back(matrix[i][left]);
            }
            left++;
        }

---------------------------------------------------------------------------------------------

4. : size_t i = 0:


This is an unsigned integer type that is typically used for representing sizes and counts. It is defined in the C++ standard library and is guaranteed to be able to represent the size of any object in bytes. Using size_t is a good practice when dealing with sizes or indices, especially for containers like vectors, as it avoids potential issues with negative indices.


---------------------------------------------------------------------------------------------



  


Question :

You are given an array IDs representing identification numbers assigned to employees in a company. However, due to a system error, some employees have duplicate IDs.

In one move, you can increment any ID by 1 to make it unique.

Print the minimum number of moves required to ensure that every employee has a unique ID.

The test cases are generated so that the answer fits within a 32-bit integer.

Input Format

The first line will give T, the number of test cases.
The first line of each test case will give n, the number of employees (size of IDs).
The second line of each test case will give the array IDs of n elements.
Constraints

1 ≤ T ≤ 1000
1 ≤ IDs.length ≤ 10^5
0 ≤ IDs[i] ≤ 10^5
Output Format

For each test case, print the minimum number of moves required to make all IDs unique.

Sample Input 0

1
3
1 2 2
Sample Output 0

1
Explanation 0

After 1 move, the IDs could be [1, 2, 3].

Sample Input 1

1
6
3 2 1 2 1 7
Sample Output 1

6
Explanation 1

After 6 moves, the ID's could be [3, 4, 1, 2, 5, 7]. It can be shown with 5 or fewer moves that it is impossible for the array to have all unique values.

  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CODE:


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int T;
    cin >> T; // Read number of test cases

    while (T--) {
        int n;
        cin >> n; // Read number of employees
        vector<int> IDs(n);

        for (int i = 0; i < n; ++i) {
            cin >> IDs[i]; // Read IDs
        }

        // Sort the IDs
        sort(IDs.begin(), IDs.end());

        int moves = 0;
        int lastUniqueID = -1; // Initialize to a value less than the minimum possible ID

        for (int i = 0; i < n; ++i) {
            if (IDs[i] <= lastUniqueID) {
                // If the current ID is not greater than the last unique ID, we need to increment it
                moves += (lastUniqueID + 1) - IDs[i]; // Increment to the next unique ID
                lastUniqueID += 1; // Update last unique ID
            } else {
                // If it's already unique, just update the last unique ID
                lastUniqueID = IDs[i];
            }
        }

        cout << moves << endl; // Output the result for the current test case
    }

 
    return 0;
}

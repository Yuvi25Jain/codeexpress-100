Question : 


The bustling city of Skyline has recently implemented a system for tracking building permits. Each permit has a unique ID, and the city council stores these IDs in sorted order. Mayor Thompson needs to locate a specific permit ID to investigate a complaint about construction violations.

Help the mayor by finding the position of the desired permit ID in the sorted list. If the permit ID does not exist, inform the mayor with a -1 to save their time.

Input Format

An integer t, the number of test cases. For each test case: An integer n, representing the number of permits. A sorted list of integers permits, of size n, representing the permit IDs. An integer target, representing the permit ID the mayor is searching for.

Constraints

1≤t≤10
1≤n≤10
0≤permits[i]≤10^9
0≤target≤10^9
Output Format

For each test case, output a single integer representing the 0-based index of the target permit ID if found, otherwise -1.

Sample Input 0

1  
5  
1001 1002 1005 1010 1012  
1005  
Sample Output 0

2
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CODE : 


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

// Function to perform binary search
int binarySearch(const vector<int>& permits, int target) {
    int left = 0;
    int right = permits.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (permits[mid] == target) {
            return mid; // Target found
        } else if (permits[mid] < target) {
            left = mid + 1; // Search in the right half
        } else {
            right = mid - 1; // Search in the left half
        }
    }
    return -1; // Target not found
}

int main() {
    int t; // Number of test cases
    cin >> t;

    while (t--) {
        int n; // Number of permits
        cin >> n;

        vector<int> permits(n);
        for (int i = 0; i < n; ++i) {
            cin >> permits[i]; // Input permit IDs
        }

        int target; // Permit ID to search for
        cin >> target;

        // Find the index of the target permit ID
        int result = binarySearch(permits, target);
        cout << result << endl; // Output the result
    }

 
    return 0;
}




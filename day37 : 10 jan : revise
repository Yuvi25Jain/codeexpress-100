Question :

You are given an array of pyramid lights where each light can either be on (1) or off (0). Your goal is to find the smallest window of size k such that all lights in that window are on. If no such window exists, return -1.

Input Format

An integer t representing the number of test cases.
For each test case:
An integer n representing the number of lights.
An array lights of size n, where 1 indicates the light is on and 0 indicates it is off.
An integer k representing the size of the sliding window.
Constraints

1≤t≤100
1≤n≤10
1≤k≤n
The total number of lights across all test cases does not exceed 10^6.
Output Format

For each test case, output an integer representing the starting index of the smallest all-on window, or -1 if no such window exists.

Sample Input :

1  
6  
1 0 1 1 0 1  
3  
Sample Output :

-1
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CODE: 


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;



int findSmallestAllOnWindow(int n, const vector<int>& lights, int k) {
    for (int i = 0; i <= n - k; ++i) {
        bool allOn = true;
        for (int j = 0; j < k; ++j) {
            if (lights[i + j] == 0) {
                allOn = false;
                break;
            }
        }
        if (allOn) {
            return i; // Return the starting index of the first valid window
        }
    }
    return -1; // No valid window found
}

int main() {
    int t;
    cin >> t; // Read number of test cases
    while (t--) {
        int n;
        cin >> n; // Read number of lights
        vector<int> lights(n);
        for (int i = 0; i < n; ++i) {
            cin >> lights[i]; // Read the lights array
        }
        int k;
        cin >> k; // Read the size of the sliding window

        int result = findSmallestAllOnWindow(n, lights, k);
        cout << result << endl; // Output the result for the test case
    }
   
    return 0;
}


  

Question: 

In a peaceful riverside village, fishermen are preparing their nets for a big catch. Some parts of the net are intact and ready for fishing, while others (represented as 0) are damaged and unusable. To ensure a successful fishing trip, the fishermen must arrange the net pieces so that all damaged parts are shifted to the end, while the usable parts retain their original order.

The task must be completed efficiently, modifying the sequence of net pieces directly in place without creating a copy of the array. Can you help the fishermen prepare their nets for the big day?

Input Format

The first line contains an integer T, the number of test cases.
For each test case:
The first line contains an integer n, the number of pieces in the net.
The second line contains n integers, representing the condition of each piece of the net, where 0 represents a damaged piece.
Constraints

1≤T≤100
1≤n≤10^4
−2^31≤net[i]≤2^31 −1
Output Format

For each test case, output a single line containing the rearranged sequence of the net pieces, with all damaged parts (0s) at the end, maintaining the relative order of the intact parts.

Sample Input 0

2  
5  
0 1 0 3 12  
1  
0
Sample Output 0

1 3 12 0 0
0
Explanation 0

Test Case 1: The initial sequence is [0, 1, 0, 3, 12]. The intact pieces 1, 3, and 12 retain their order, while the damaged pieces 0 are shifted to the end, resulting in [1, 3, 12, 0, 0].

Test Case 2: The sequence contains only a damaged piece, [0], so no rearrangement is needed.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  CODE:

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

// Function to rearrange the net pieces
void rearrangeNets(vector<int>& net) {
    int n = net.size(); // Get the size of the net
    int j = 0; // Pointer to track the position for non-zero elements

    // Loop through the net pieces
    for (int i = 0; i < n; i++) {
        // If the current piece is not damaged (not 0)
        if (net[i] != 0) {
            net[j] = net[i]; // Place it at the 'j' position
            j++; // Move the pointer forward
        }
    }

    // After placing all non-zero elements, fill the rest with 0s
    while (j < n) {
        net[j] = 0; // Fill the remaining positions with 0
        j++; // Move the pointer forward
    }
}

int main() {
    int T; // Number of test cases
    cin >> T; // Read the number of test cases

    while (T--) {
        int n; // Number of pieces in the net
        cin >> n; // Read the number of pieces
        vector<int> net(n); // Create a vector to hold the net pieces

        // Read the condition of each piece
        for (int i = 0; i < n; i++) {
            cin >> net[i]; // Input each piece's condition
        }

        // Call the function to rearrange the net pieces
        rearrangeNets(net);

        // Output the rearranged sequence
        for (int i = 0; i < n; i++) {
            cout << net[i] << " "; // Print each piece
        }
        cout << endl; // New line after each test case output
    }

 
    return 0;
}

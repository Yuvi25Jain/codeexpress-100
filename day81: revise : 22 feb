CODE:

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class Solution {
public:
    int countVillages(vector<vector<char>>& grid) {
        if (grid.empty()) return 0;

        size_t m = grid.size();
        size_t n = grid[0].size();
        int villageCount = 0;

        for (size_t i = 0; i < m; ++i) {
            for (size_t j = 0; j < n; ++j) {
                if (grid[i][j] == '1') {
                    // Found a new village
                    villageCount++;
                    // Perform DFS to mark all connected land
                    dfs(grid, i, j);
                }
            }
        }
        return villageCount;
    }

private:
    void dfs(vector<vector<char>>& grid, size_t i, size_t j) {
        // Check for out of bounds and water
        if (i >= grid.size() || j >= grid[0].size() || grid[i][j] == '0') {
            return;
        }

        // Mark the cell as visited
        grid[i][j] = '0';

        // Explore all four directions
        dfs(grid, i + 1, j); // down
        dfs(grid, i - 1, j); // up
        dfs(grid, i, j + 1); // right
        dfs(grid, i, j - 1); // left
    }
};

int main() {
    int T;
    cin >> T;
    while (T--) {
        int m, n;
        cin >> m >> n;
        vector<vector<char>> grid(m, vector<char>(n));
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> grid[i][j];
            }
        }

        Solution solution;
        int result = solution.countVillages(grid);
        cout << result << endl;
    }
 
   
    return 0;
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Question :

You are given a map of land and water in the form of an m x n grid. Each cell in the grid is either:

'1' representing land (a village). '0' representing water (a river or lake). A village is a group of connected land ('1') cells. Villages are connected only if they are adjacent horizontally or vertically (not diagonally). Your task is to count how many separate villages exist on the map.

Input Format

The first line contains T, the number of test cases. For each test case: The first line contains two integers, m and n, representing the dimensions of the map. The next m lines contain n characters ('0' or '1'), representing the map grid. Constraints

1 ≤ T ≤ 100 1 ≤ m, n ≤ 300 grid[i][j] is '0' or '1' Output Format

For each test case, print the number of separate villages.

Sample Input 0

1 4 5 1 1 1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 0 0 0 Sample Output 0

1 Explanation 0

There is only one connected group of land, so there is 1 village.

Sample Input 1

1 4 5 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 Sample Output 1

3 Explanation 1

There are 3 separate villages, each disconnected from the other

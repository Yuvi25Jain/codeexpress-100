Question: 

The mayor of a rapidly growing city wants to ensure balanced population distribution. The city is represented as a grid where each cell indicates the population in that area. Your task is to divide the grid into two zones such that the population difference between the two zones is minimized. Each zone must contain at least one cell, and the two zones must be disjoint.

Input Format

An integer t, the number of test cases. For each test case: An integer n, representing the size of the grid. A 2D array grid of size n x n, where each cell contains the population.

Constraints

1≤t≤5
1≤n≤8
1≤grid[i][j]≤100
Output Format

For each test case, output a single integer representing the minimum population difference between the two zones.

Sample Input 0

1  
4  
1 3 1 3  
2 2 2 2  
3 1 3 1  
2 2 2 2  
Sample Output 0

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CODE: 

#include <iostream>
#include <vector>
#include <cmath>
#include <limits>

using namespace std;

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> grid(n, vector<int>(n));
        int totalPopulation = 0;

        // Read the grid and calculate total population
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> grid[i][j];
                totalPopulation += grid[i][j];
            }
        }

        int minDiff = numeric_limits<int>::max();
        int totalCells = n * n;

        // Iterate over all possible masks (1 to 2^(n*n) - 1)
        for (int mask = 1; mask < (1 << totalCells); ++mask) {
            int zone1Population = 0;
            int zone2Population = 0;

            // Count the population for zone 1 and zone 2 based on the mask
            for (int i = 0; i < totalCells; ++i) {
                int row = i / n;
                int col = i % n;
                if (mask & (1 << i)) {
                    zone1Population += grid[row][col];
                } else {
                    zone2Population += grid[row][col];
                }
            }

            // Ensure both zones have at least one cell
            if (zone1Population > 0 && zone2Population > 0) {
                int diff = abs(zone1Population - zone2Population);
                minDiff = min(minDiff, diff);
            }
        }

        cout << minDiff << endl;
    }

    return 0;
}

0 
